{"version":3,"sources":["services/appService.js","components/WordToSearch.jsx","components/keyBoard.jsx","components/Attempt.jsx","components/Result.jsx","App.js","serviceWorker.js","index.js"],"names":["words_list","generateAlphabets","start","charCodeAt","last","alphabets","push","String","fromCharCode","WordToSearch","word","usedLetters","status","className","split","map","ch","i","key","includes","KeyBoard","window","addEventListener","e","keyCode","props","letterClick","this","index","onClick","Component","Attempt","attempt","maxAttempt","Result","style","color","App","state","wordToSearch","handleLetterClick","letter","score","length","setState","startGame","sample","Fragment","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8881e27f.chunk.js","sourcesContent":["const words_list = [\r\n  \"armoire\",\r\n  \"boucle\",\r\n  \"buisson\",\r\n  \"bureau\",\r\n  \"chaise\",\r\n  \"carton\",\r\n  \"couteau\",\r\n  \"fichier\",\r\n  \"garage\",\r\n  \"glace\",\r\n  \"journal\",\r\n  \"kiwi\",\r\n  \"lampe\",\r\n  \"liste\",\r\n  \"montagne\",\r\n  \"remise\",\r\n  \"sandale\",\r\n  \"taxi\",\r\n  \"vampire\",\r\n  \"volant\"\r\n];\r\n\r\nexport function getListOfWords() {\r\n  return words_list;\r\n}\r\n\r\nexport function generateAlphabets() {\r\n  let start = \"a\".charCodeAt(0);\r\n  const last = \"z\".charCodeAt(0);\r\n  const alphabets = [];\r\n\r\n  while (start <= last) {\r\n    alphabets.push(String.fromCharCode(start));\r\n    start++;\r\n  }\r\n\r\n  return alphabets;\r\n}\r\n","import React from \"react\";\r\n\r\nconst WordToSearch = ({word, usedLetters, status}) => {\r\n    return (\r\n        <div className=\"word\">\r\n            {\r\n                word.split(\"\").map((ch, i) => {\r\n                    return (\r\n                        <span key={i}>\r\n                            {usedLetters.includes(ch) ? (\r\n                                <span className={status === \"win\" ? \"win-style\" : \"\"}>\r\n                                    {ch}\r\n                                </span>\r\n                            ) : status !== \"lost\" ? (\r\n                                \"_\"\r\n                            ) : (\r\n                                <span className=\"lost-style\">{ch}</span>\r\n                            )}\r\n                        </span>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WordToSearch;\r\n","import React, {Component} from \"react\";\r\n\r\nclass KeyBoard extends Component {\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"keypress\", e => {\r\n            if (e.keyCode !== 13) this.props.letterClick(e.key);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {alphabets, usedLetters, word, letterClick} = this.props;\r\n\r\n        return (\r\n            <div className=\"keyboard\">\r\n                {\r\n                    alphabets.map((ch, index) => (\r\n                        <button\r\n                            key={index}\r\n                            className={\r\n                                usedLetters.includes(ch)\r\n                                    ? word.includes(ch)\r\n                                    ? \"used-success\"\r\n                                    : \"used-fail\"\r\n                                    : \"\"\r\n                            }\r\n                            onClick={() => {\r\n                                letterClick(ch);\r\n                            }}\r\n                        >\r\n                            {ch}\r\n                        </button>\r\n                    ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KeyBoard;\r\n","import React from \"react\";\r\n\r\nconst Attempt = ({attempt, maxAttempt}) => {\r\n    return (\r\n        <h4>\r\n            You have ({maxAttempt - attempt}) attempt\r\n            {maxAttempt - attempt > 1 ? \"s\" : \"\"} left\r\n        </h4>\r\n    );\r\n};\r\n\r\nexport default Attempt;\r\n","import React from \"react\";\r\n\r\nconst Result = ({status}) => {\r\n    return (\r\n        status && (\r\n            <div className=\"result\">\r\n                {\r\n                    status === \"win\" ? (\r\n                        <span style={{color: \"green\"}}>ðŸŽ‰ You Win ðŸŽ‰</span>\r\n                    ) : (\r\n                        <span style={{color: \"#086600\"}}>ðŸ˜ž You Lost ðŸ˜ž</span>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    );\r\n};\r\n\r\nexport default Result;\r\n","import React, {Component} from \"react\";\nimport {getListOfWords, generateAlphabets} from \"./services/appService\";\nimport {sample} from \"lodash\";\nimport WordToSearch from \"./components/WordToSearch\";\nimport KeyBoard from \"./components/keyBoard\";\nimport Attempt from \"./components/Attempt\";\nimport Result from \"./components/Result\";\n\nclass App extends Component {\n    state = {\n        wordToSearch: \"\",\n        maxAttempt: 10, // max attempt\n        status: \"\", // \"\": still in game, \"win\": winning the game, \"lost\": lost the game\n    };\n\n    componentDidMount() {\n        // start the game when you press the Enter key\n        window.addEventListener(\"keypress\", e => {\n            if (e.keyCode === 13) this.startGame();\n        });\n    }\n\n    handleLetterClick = letter => {\n        const usedLetters = [...this.state.usedLetters];\n        let status = \"win\";\n        let attempt = this.state.attempt;\n        let score = this.state.score;\n        // verify if the pressed letter is already used, then do nothing.\n        if (usedLetters.includes(letter)) {\n            return;\n        }\n        // if the pressed letter isn't used yet,\n        // add the letter to the usedLetters array\n        usedLetters.push(letter);\n        // Verify if the letter exists in the the searched word\n        if (!this.state.wordToSearch.includes(letter)) {\n            // if not increase the attempt, the your game life is descreased\n            attempt = this.state.attempt + 1;\n            // decrease the score by 1\n            score = this.state.score > 0 ? this.state.score - 1 : 0;\n        } else {\n            // if yes increase the code by 2\n            score = this.state.score + 2;\n        }\n        // loop the searched word to verify if all letters are used\n        for (let i = 0; i < this.state.wordToSearch.length; i++) {\n            if (!usedLetters.includes(this.state.wordToSearch[i])) {\n                // if one unused letter is found, set the status to empty string to say that the game is still running\n                status = \"\";\n                break;\n            }\n        }\n        // verify if your life game is zero, the set the game status to \"lost\"\n        if (attempt === this.state.maxAttempt) status = \"lost\";\n\n        this.setState({usedLetters, status, attempt, score});\n    };\n\n    startGame = () => {\n        this.setState({\n            alphabets: generateAlphabets(),\n            wordToSearch: sample(getListOfWords()),\n            usedLetters: [],\n            status: \"\",\n            attempt: 0,\n            score: 0\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"app\">\n                <div className=\"content\">\n                    <h1>Hangman Game</h1>\n                    {\n                        this.state.wordToSearch && (\n                            <React.Fragment>\n                                <div className=\"score\">Score: {this.state.score}</div>\n                                <Attempt attempt={this.state.attempt} maxAttempt={this.state.maxAttempt}/>\n                                <WordToSearch\n                                    word={this.state.wordToSearch}\n                                    usedLetters={this.state.usedLetters}\n                                    status={this.state.status}\n                                />\n                                {!this.state.status && (\n                                    <KeyBoard\n                                        alphabets={this.state.alphabets}\n                                        word={this.state.wordToSearch}\n                                        usedLetters={this.state.usedLetters}\n                                        letterClick={this.handleLetterClick}\n                                    />\n                                )}\n                            </React.Fragment>\n                        )\n                    }\n\n                    <Result status={this.state.status}/>\n\n                    {\n                        (\n                            [\"win\", \"lost\"].includes(this.state.status) ||\n                            !this.state.wordToSearch) && (\n                            <button className=\"start-btn\" onClick={this.startGame}>\n                                Start Game\n                            </button>\n                        )\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}